// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package g3test

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameInfoClient is the client API for GameInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameInfoClient interface {
	Test3(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error)
}

type gameInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewGameInfoClient(cc grpc.ClientConnInterface) GameInfoClient {
	return &gameInfoClient{cc}
}

func (c *gameInfoClient) Test3(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error) {
	out := new(Game)
	err := c.cc.Invoke(ctx, "/g3test.GameInfo/Test3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameInfoServer is the server API for GameInfo service.
// All implementations should embed UnimplementedGameInfoServer
// for forward compatibility
type GameInfoServer interface {
	Test3(context.Context, *Game) (*Game, error)
}

// UnimplementedGameInfoServer should be embedded to have forward compatible implementations.
type UnimplementedGameInfoServer struct {
}

func (UnimplementedGameInfoServer) Test3(context.Context, *Game) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test3 not implemented")
}

// UnsafeGameInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameInfoServer will
// result in compilation errors.
type UnsafeGameInfoServer interface {
	mustEmbedUnimplementedGameInfoServer()
}

func RegisterGameInfoServer(s grpc.ServiceRegistrar, srv GameInfoServer) {
	s.RegisterService(&GameInfo_ServiceDesc, srv)
}

func _GameInfo_Test3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Game)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameInfoServer).Test3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/g3test.GameInfo/Test3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameInfoServer).Test3(ctx, req.(*Game))
	}
	return interceptor(ctx, in, info, handler)
}

// GameInfo_ServiceDesc is the grpc.ServiceDesc for GameInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "g3test.GameInfo",
	HandlerType: (*GameInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test3",
			Handler:    _GameInfo_Test3_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "g3.proto",
}
