// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HelloKSClient is the client API for HelloKS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloKSClient interface {
	Welcome(ctx context.Context, in *KS, opts ...grpc.CallOption) (*KS, error)
}

type helloKSClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloKSClient(cc grpc.ClientConnInterface) HelloKSClient {
	return &helloKSClient{cc}
}

func (c *helloKSClient) Welcome(ctx context.Context, in *KS, opts ...grpc.CallOption) (*KS, error) {
	out := new(KS)
	err := c.cc.Invoke(ctx, "/pb.HelloKS/Welcome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelloKSServer is the server API for HelloKS service.
// All implementations must embed UnimplementedHelloKSServer
// for forward compatibility
type HelloKSServer interface {
	Welcome(context.Context, *KS) (*KS, error)
	mustEmbedUnimplementedHelloKSServer()
}

// UnimplementedHelloKSServer must be embedded to have forward compatible implementations.
type UnimplementedHelloKSServer struct {
}

func (UnimplementedHelloKSServer) Welcome(context.Context, *KS) (*KS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Welcome not implemented")
}
func (UnimplementedHelloKSServer) mustEmbedUnimplementedHelloKSServer() {}

// UnsafeHelloKSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloKSServer will
// result in compilation errors.
type UnsafeHelloKSServer interface {
	mustEmbedUnimplementedHelloKSServer()
}

func RegisterHelloKSServer(s grpc.ServiceRegistrar, srv HelloKSServer) {
	s.RegisterService(&HelloKS_ServiceDesc, srv)
}

func _HelloKS_Welcome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloKSServer).Welcome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HelloKS/Welcome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloKSServer).Welcome(ctx, req.(*KS))
	}
	return interceptor(ctx, in, info, handler)
}

// HelloKS_ServiceDesc is the grpc.ServiceDesc for HelloKS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelloKS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.HelloKS",
	HandlerType: (*HelloKSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Welcome",
			Handler:    _HelloKS_Welcome_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ks.proto",
}
