// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package g4

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DestroyClient is the client API for Destroy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DestroyClient interface {
	Zeno(ctx context.Context, in *Mota, opts ...grpc.CallOption) (*Mota, error)
}

type destroyClient struct {
	cc grpc.ClientConnInterface
}

func NewDestroyClient(cc grpc.ClientConnInterface) DestroyClient {
	return &destroyClient{cc}
}

func (c *destroyClient) Zeno(ctx context.Context, in *Mota, opts ...grpc.CallOption) (*Mota, error) {
	out := new(Mota)
	err := c.cc.Invoke(ctx, "/g4.Destroy/Zeno", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DestroyServer is the server API for Destroy service.
// All implementations should embed UnimplementedDestroyServer
// for forward compatibility
type DestroyServer interface {
	Zeno(context.Context, *Mota) (*Mota, error)
}

// UnimplementedDestroyServer should be embedded to have forward compatible implementations.
type UnimplementedDestroyServer struct {
}

func (UnimplementedDestroyServer) Zeno(context.Context, *Mota) (*Mota, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Zeno not implemented")
}

// UnsafeDestroyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DestroyServer will
// result in compilation errors.
type UnsafeDestroyServer interface {
	mustEmbedUnimplementedDestroyServer()
}

func RegisterDestroyServer(s grpc.ServiceRegistrar, srv DestroyServer) {
	s.RegisterService(&Destroy_ServiceDesc, srv)
}

func _Destroy_Zeno_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mota)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DestroyServer).Zeno(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/g4.Destroy/Zeno",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DestroyServer).Zeno(ctx, req.(*Mota))
	}
	return interceptor(ctx, in, info, handler)
}

// Destroy_ServiceDesc is the grpc.ServiceDesc for Destroy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Destroy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "g4.Destroy",
	HandlerType: (*DestroyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Zeno",
			Handler:    _Destroy_Zeno_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "g4.proto",
}
